{"title":"JIT 学习","slug":"JIT学习","date":"2020-10-16","updated":"2020-09-10","comments":true,"path":"api/posts/17972.json","excerpt":null,"cover":null,"covers":null,"content":"<h2 id=\"JIT 原理\"><a href=\"#JIT 原理\" class=\"headerlink\" title=\"JIT 原理\"></a>JIT 原理</h2><p>Just In Time 编译，也叫运行时编译，不同于 C/C++ 语言直接被翻译成机器指令，javac 把 java 的源文件翻译成了 class 文件，而 class 文件中全都是 java 字节码，那么，JVM 在加载了这些 class 文件以后，针对这些字节码，逐条取出，逐条执行，这种方法就是解释执行。</p>\n<p>还有一种，就是将 java 字节码重新编译优化，生成机器码，让 CPU 直接执行，这样编出来的代码效率更高，通常我们不必把所有的 java 方法都编译成机器码，只需要把调用最频繁，占据 CPU 时间最长的方法找出来将其编译成机器码，这种调用最频繁的 java 方法就是我们常说的热点方法。</p>\n<h2 id=\"技术点\"><a href=\"# 技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点 </h2><p> 从大的框架，就是申请一块既有写权限又有执行权限的内存，然后把你要编译的 java 方法，翻译成机器码，写入到这块内存里，当再需要调用原来的 java 方法时，就转向调用这块内存。</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #include&lt;stdio.h&gt;</span><br><span class=\"line\">int inc(int a) &#123;</span><br><span class=\"line\">    return a + 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, inc(3));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>objdump -d 1</code>查看它的机器码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000400526 &lt;inc&gt;:</span><br><span class=\"line\">  400526:\t55                   \tpush   %rbp# 保存上一个栈帧的基址，并把当前的栈指针赋给栈基址寄存器</span><br><span class=\"line\">  400527:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  40052a:\t89 7d fc             \tmov    %edi,-0x4(%rbp)# 把 edi 存到栈上。在 x64 处理器上，前 6 个参数都是使用寄存器传参的。第一个参数会使用 rdi，第二个参数使用 rsi，等等。所以 edi 里存的其实就是第一个参数，也就是整数 3</span><br><span class=\"line\">  40052d:\t8b 45 fc             \tmov    -0x4(%rbp),%eax# 把上一步存到栈上的那个整数再存进 eax 中</span><br><span class=\"line\">  400530:\t83 c0 01             \tadd    $0x1,%eax# 把 eax 加上 1， 然后就退栈，返回。按照 x64 的规定（ABI），返回值通过 eax 传递</span><br><span class=\"line\">  400533:\t5d                   \tpop    %rbp</span><br><span class=\"line\">  400534:\tc3                   \tretq</span><br></pre></td></tr></table></figure>\n\n<p>我们发现，第三局第四局好像没有必要，gcc 默认情况下生成的机器码有点没必要，它总要把入参放到栈上，但其实我们是可以直接把参数从 rdi 中放入到 rax 中的，在运行时修改 inc 的逻辑即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #include&lt;stdio.h&gt;</span><br><span class=\"line\"> #include&lt;memory.h&gt;</span><br><span class=\"line\"> #include&lt;sys&#x2F;mman.h&gt;</span><br><span class=\"line\">typedef int (* inc_func)(int a); </span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    char code[] &#x3D; &#123; </span><br><span class=\"line\">        0x55,             &#x2F;&#x2F; push rbp</span><br><span class=\"line\">        0x48, 0x89, 0xe5, &#x2F;&#x2F; mov rsp, rbp</span><br><span class=\"line\">        0x89, 0xf8,       &#x2F;&#x2F; mov edi, eax</span><br><span class=\"line\">        0x83, 0xc0, 0x01, &#x2F;&#x2F; add $1, eax</span><br><span class=\"line\">        0x5d,             &#x2F;&#x2F; pop rbp</span><br><span class=\"line\">        0xc3              &#x2F;&#x2F; ret</span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    void * temp &#x3D; mmap(NULL, sizeof(code), PROT_WRITE | PROT_EXEC,</span><br><span class=\"line\">            MAP_ANONYMOUS | MAP_PRIVATE, -1, 0); </span><br><span class=\"line\">    memcpy(temp, code, sizeof(code));</span><br><span class=\"line\">    inc_func p_inc &#x3D; (inc_func)temp;</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, p_inc(7));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mmap 申请了一块有写权限和执行权限的内存，然后将手写的机器码考进去，使用一个函数指针指向这块内存并调用它，通过这种方式就可以执行这一段手写的机器码了。</p>\n<p>我们通过手写机器码将原来的 inc 函数代替掉了，在新的例子中，我们使用程序中定义的数据来重新造了一个 inc 函数，这种在运行过程创建新的函数的方式，就是 JIT 的核心操作。</p>\n","url":"/posts/17972/","min2read":3,"word4post":826,"prev_post":{"title":"Loving strangers","url":"/posts/15058/"},"next_post":{"title":"Dlink DIR-823G 漏洞挖掘过程","url":"/posts/39342/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"JIT 原理\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">JIT 原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"技术点\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">技术点 </span></a></li></ol>","categories":[],"tags":[{"name":"chrome知识点","path":"api/tags/chrome知识点.json","url":"/tags/chrome知识点/"}]}