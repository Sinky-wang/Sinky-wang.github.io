{"title":"V8 漏洞初学习","slug":"V8漏洞初学习","date":"2020-07-17","updated":"2020-09-10","comments":true,"path":"api/posts/14155.json","excerpt":null,"cover":"https://i.loli.net/2020/07/17/JCK5EwuRAc8SQTn.png","covers":["https://i.loli.net/2020/07/17/JCK5EwuRAc8SQTn.png"],"content":"<h1 id=\"V8 基础\"><a href=\"#V8 基础\" class=\"headerlink\" title=\"V8 基础\"></a>V8 基础</h1><p>v8 是 chrome 浏览器的 js 解析引擎，大多数针对 chrome 的漏洞利用几乎都是 v8 引擎引起的</p>\n<blockquote>\n<p>v8 编译后二进制名称叫 d8.</p>\n</blockquote>\n<h2 id=\"allow-natives-syntax 选项\"><a href=\"#allow-natives-syntax 选项\" class=\"headerlink\" title=\"allow-natives-syntax 选项\"></a>allow-natives-syntax 选项 </h2><p> 定义了一些 v8 运行时支持函数，以便于本地调试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">browser&#x2F;x64.release$ .&#x2F;d8 --allow-natives-syntax</span><br><span class=\"line\">V8 version 7.5.0 (candidate)</span><br><span class=\"line\">d8&gt; var a &#x3D; [1, 2, 3];</span><br><span class=\"line\">undefined</span><br><span class=\"line\">d8&gt; %DebugPrint(a);</span><br><span class=\"line\">0x2ebcfb54dd41 &lt;JSArray[3]&gt;</span><br><span class=\"line\">[1, 2, 3]</span><br><span class=\"line\">d8&gt; %SystemBreak();</span><br><span class=\"line\">Trace&#x2F;breakpoint trap (core dumped)</span><br></pre></td></tr></table></figure>\n\n<p>在加载 d8 时加入此选项可以在 js 中调试本地运行时函数：</p>\n<p><code>%DebugPrint(obj) 输出对象地址</code><br><code>%SystemBreak() 触发调试中断主要结合 gdb 等调试器使用</code></p>\n<p>gdb 的 gdbinit 脚本可以使 gdb 中就能可视化显示 v8 的对象结构，将该脚本下载重命名为 gdbinit_v8 并添加至 /.gdbinit 脚本：</p>\n<p><code>source /path/to/gdbinit_v8</code></p>\n<p>下面将 allow-natives-syntax 选项和 gdbinit 结合使用，编写 test.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [1,2,3];</span><br><span class=\"line\">var b &#x3D; [1.1, 2.2, 3.3];</span><br><span class=\"line\">var c &#x3D; [a, b];</span><br><span class=\"line\">%DebugPrint(a);</span><br><span class=\"line\">%SystemBreak();  &#x2F;&#x2F; 触发第一次调试</span><br><span class=\"line\">%DebugPrint(b);</span><br><span class=\"line\">%SystemBreak();  &#x2F;&#x2F; 触发第二次调试</span><br><span class=\"line\">%DebugPrint(c);</span><br><span class=\"line\">%SystemBreak();  &#x2F;&#x2F; 触发第三次调试</span><br></pre></td></tr></table></figure>\n\n<p>gdb 运行 d8:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@kali:~&#x2F;ctf&#x2F;browser&#x2F;x64.release$ gdb .&#x2F;d8</span><br><span class=\"line\">pwndbg&gt; set args --allow-natives-syntax .&#x2F;test.js</span><br><span class=\"line\">pwndbg&gt; r</span><br><span class=\"line\">Starting program: x64.release&#x2F;d8 --allow-natives-syntax .&#x2F;test.js</span><br><span class=\"line\">[Thread debugging using libthread_db enabled]</span><br><span class=\"line\">[New Thread 0x7ff87fde9700 (LWP 18393)]</span><br><span class=\"line\">[New Thread 0x7ff87f5e8700 (LWP 18394)]</span><br><span class=\"line\">[New Thread 0x7ff87ede7700 (LWP 18395)]</span><br><span class=\"line\">0x12e891f8df11 &lt;JSArray[3]&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，程序打印了数组对象 a 的内存地址，并且 SystemBreak 触发了 gdb 的中断。</p>\n<p>此时就可以利用上面已经加入的 gdbinit 脚本中包含的命令调试对象结构，主要使用 job 命令，可以可视化显示 js 对象的内存结构。</p>\n<p>v8 在内存中只有数字和对象梁忠表示，为了区分两者，v8 在所有对象的内存地址末尾都加了 1，以便表示它是个对象。对象 a 世内存地址为 0x12e891f8df10。</p>\n<p>telescope 命令查看内存数据。</p>\n<p>在 gdb 中使用 c 命令继续运行，发现停在了第二次 SystemBreak 的地方，然后用 job 命令查看第二个对象 b 的地址，根据上面的套路，可知对象 b 的实际内存地址为 0x244de278df58.</p>\n<h2 id=\"v8 的对象结构\"><a href=\"#v8 的对象结构\" class=\"headerlink\" title=\"v8 的对象结构\"></a>v8 的对象结构 </h2><p> 和 vb 等语言的解析类似，JS 是一种解释之行语言，v8 本质上是一个 JS 的解释执行程序。</p>\n<p>首先，需要了解 v8 解析执行 javaScript 语句的基本流程：v8 在读取 js 语句后，首先将这条语句解析为语法树，然后通过解释器将语法树变为中间语言的 Bytecode 字节码，最后利用内部虚拟机将字节码转换为机器码来执行。</p>\n<p>为了加快解析过程，v8 会记录下某条语法树的执行次数，当 v8 发现某条语法树执行次数超过一定阈值后，就会将这段语法树直接转换为机器码，后续再调用这条 js 语句时，v8 会直接调用这条语法树对应的机器码，而不用再转换为 byte code 字节码，大大加快了执行速度，这就是著名的 JIT 优化。</p>\n<p>但是这样的性能优化虽然加快了程序的执行，但也带来了很多的安全问题，如果 v8 本来通过 JIT 引擎为某段语法树比如 a+b 假发计算生成了一段机器码<code>add eax,ebx</code>，而在后续某个时刻，攻击者在 js 引擎中突然改变了 a 和 b 的对象类型，而 JIT 引擎并没有识别出这个改变，就会造成 a 和 b 对象在假发运算时的类型混淆。</p>\n<p>一个对象在内存中布局大致如下：</p>\n<ul>\n<li>map: 表明了一个对象的类型对象 b 为 PACKED_DOUBLE_ELEMENTS 类型</li>\n<li>prototype：prototype</li>\n<li>elements: 对象元素</li>\n<li>length: 元素个数</li>\n<li>properties: 属性</li>\n</ul>\n<p>数组对象的 elements 其实也是个对象，这些元素在内存中的分布正好位于数组对象的上方，即低地址处，也就是说，在内存申请上，v8 先申请了一块内存存储元素内容，然后申请了一块内存存储这个数组的对象结构，对象中的 elements 指向了存储元素内容的内存地址，如图：</p>\n<p><img src=\"https://i.loli.net/2020/07/17/JCK5EwuRAc8SQTn.png\" alt=\"1.PNG\"></p>\n<p>由于浏览器的漏洞利用几乎都要基于对象结构来实现，因此熟悉上述 v8 对象的内存布局，对后续会很有帮助。</p>\n<blockquote>\n<p>上述内存布局是 FloatArray 的内存布局，其他类型的 Array 与其类似，但不完全相同。</p>\n</blockquote>\n<h2 id=\"浏览器 V8 的解题步骤\"><a href=\"# 浏览器 V8 的解题步骤\" class=\"headerlink\" title=\"浏览器 V8 的解题步骤\"></a>浏览器 V8 的解题步骤 </h2><p> 一般浏览器的出题有两种，以中山市 diff 修改 v8 引擎源代码，人为制造出一个漏洞，另一种是直接采用某个 cve 漏洞。出题者通常会提供一个 idf 文件，或直接给出一个编译后 diff 补丁后的浏览器程序，如果只给了一个 diff 文件，则需要我们自己去下载相关 commit 源码，然后本地打上 diff 补丁，编译出浏览器程序在进行本地调试。</p>\n<h2 id=\"参考\"><a href=\"# 参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.codercto.com/a/81538.html\" target=\"_blank\" rel=\"noopener\">https://www.codercto.com/a/81538.html</a></p>\n<p>后续需要实践做一下这个 ctf 题目。</p>\n","url":"/posts/14155/","min2read":5,"word4post":"1.3k","prev_post":{"title":"JIT 学习","url":"/posts/17972/"},"next_post":{"title":"CVE-2020-6418","url":"/posts/4681/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"V8 基础\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">V8 基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"allow-natives-syntax 选项\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\">allow-natives-syntax 选项 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"v8 的对象结构\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">v8 的对象结构 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"浏览器 V8 的解题步骤\" href = \"#\"><span class=\"toc-number\">1.3.</span> <span class=\"toc-text\">浏览器 V8 的解题步骤 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"参考\" href = \"#\"><span class=\"toc-number\">1.4.</span> <span class=\"toc-text\">参考</span></a></li></ol></li></ol>","categories":[],"tags":[{"name":"chrome_bug","path":"api/tags/chrome_bug.json","url":"/tags/chrome-bug/"}]}